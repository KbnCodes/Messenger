{"version":3,"sources":["Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","forwardRef","ref","username","message","isUser","className","Card","CardContent","Typography","color","variant","component","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","console","log","FormControl","Input","placeholder","value","onChange","event","target","IconButton","disabled","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"gUAyBeA,G,MArBCC,sBAAW,WAAuBC,GAAQ,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,QAC9BC,EAASF,IAAaC,EAAQD,SAEpC,OACI,yBAAKD,IAAKA,EAAKI,UAAS,kBAAaD,GAAU,gBAAvB,MACpB,kBAACE,EAAA,EAAD,CAAMD,UAAWD,EAAS,oBAAsB,sBAC5C,kBAACG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,MAAM,QACNC,QAAU,KACVC,UAAU,OAERP,GAAD,UAAcD,EAAQD,UAAY,eAAlC,OAAuDC,EAAQA,gB,yBCAzES,EAdKC,IAASC,cAAc,CACvCC,OAAQ,0CACRC,WAAY,wCACZC,YAAa,+CACbC,UAAW,wBACXC,cAAe,oCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIIC,Y,iCCqDRC,MAzDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGmBJ,mBAAS,IAH5B,mBAGNvB,EAHM,KAGI4B,EAHJ,KA+Bb,OA1BAC,qBAAU,WAERnB,EAAGoB,WAAW,YACXC,QAAQ,YAAa,QACrBC,YAAW,SAAAC,GACVN,EAAYM,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAACC,GAAKD,EAAIC,GAAKpC,QAAQmC,EAAIE,iBAErE,IAEFT,qBAAU,WACTD,EAAYW,OAAO,6BACjB,IAEHC,QAAQC,IAAIjB,GACZgB,QAAQC,IAAIf,GAaV,yBAAKvB,UAAU,OACb,uCAAaH,GAEb,0BAAMG,UAAU,aACd,kBAACuC,EAAA,EAAD,CAAavC,UAAU,oBACrB,kBAACwC,EAAA,EAAD,CAAOxC,UAAU,aAAayC,YAAY,oBAAoBC,MAAOrB,EAAOsB,SAAU,SAAAC,GAAK,OAAItB,EAASsB,EAAMC,OAAOH,UACrH,kBAACI,EAAA,EAAD,CAAY9C,UAAU,kBAAkB+C,UAAW1B,EAAOhB,QAAQ,YAAYD,MAAM,UAAU4C,KAAK,SAASC,QAjBjG,SAACL,GAClBA,EAAMM,iBAEN3C,EAAGoB,WAAW,YAAYwB,IAAI,CAC5BrD,QAAUuB,EACVxB,SAAUA,EACVuD,UAAY5C,IAASU,UAAUmC,WAAWC,oBAE5ChC,EAAS,MAUD,kBAAC,IAAD,SAMN,kBAAC,IAAD,KAEIC,EAASS,KAAI,gBAAEE,EAAF,EAAEA,GAAIpC,EAAN,EAAMA,QAAN,OACX,kBAAC,EAAD,CAASyD,IAAKrB,EAAIrC,SAAUA,EAAUC,QAASA,UC9CvC0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAM3E,c","file":"static/js/main.793c3a77.chunk.js","sourcesContent":["import React, {forwardRef} from 'react'\r\nimport {Card, CardContent, Typography } from '@material-ui/core'\r\nimport './Message.css'\r\n\r\nconst Message = forwardRef(({ username, message}, ref)=> {\r\n    const isUser = username === message.username\r\n\r\n    return (\r\n        <div ref={ref} className={`message ${isUser && 'message__user'} `}>\r\n            <Card className={isUser ? \"message__userCard\" : \"message__questCard\"}> \r\n                <CardContent>\r\n                    <Typography\r\n                        color=\"white\"\r\n                        variant = \"h5\"\r\n                        component=\"h2\"\r\n                    >\r\n                        {!isUser && `${message.username || 'Unknown User'} : `}{message.message}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n                \r\n    )\r\n})\r\n\r\nexport default Message\r\n","import firebase from \"firebase\"\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyBK1rq6y-yK6n__vkKYUUDD18cbl_Bd7yI\",\r\n    authDomain: \"messenger-clone-b311d.firebaseapp.com\",\r\n    databaseURL: \"https://messenger-clone-b311d.firebaseio.com\",\r\n    projectId: \"messenger-clone-b311d\",\r\n    storageBucket: \"messenger-clone-b311d.appspot.com\",\r\n    messagingSenderId: \"840394304359\",\r\n    appId: \"1:840394304359:web:4282d661286831c49fddc2\",\r\n    measurementId: \"G-WN3DDZNHXD\"\r\n})\r\n\r\n\r\nconst db = firebaseApp.firestore()\r\n\r\nexport default db","import React,{useState, useEffect} from 'react'\nimport { FormControl, Input } from '@material-ui/core'\nimport Message from './Message'\nimport './App.css'\nimport db from './firebase'\nimport firebase from 'firebase'\nimport FlipMove from 'react-flip-move'\nimport SendIcon from '@material-ui/icons/Send'\nimport {IconButton} from '@material-ui/core'\n\nfunction App() {\n  const [input, setInput] = useState('')\n  const [messages, setMessages] = useState([])\n  const [username, setUsername] = useState('')\n  \n  useEffect(()=>{\n    //run once when app components loads\n    db.collection('messages')\n      .orderBy('timestamp', 'desc')\n      .onSnapshot(snapshot =>{\n        setMessages(snapshot.docs.map(doc =>( {id : doc.id , message:doc.data()})))\n    })\n  },[])\n\n  useEffect(() => {\n   setUsername(prompt('please enter your name'))\n  }, [])\n\n  console.log(input)\n  console.log(messages)\n\n  const sendMessage =(event)=>{\n    event.preventDefault()   \n\n    db.collection('messages').add({\n      message : input,\n      username: username,\n      timestamp : firebase.firestore.FieldValue.serverTimestamp()\n    })\n    setInput('')\n  }\n  return (\n    <div className=\"App\">\n      <h2>Welcome {username}</h2>\n      \n      <form className=\"app__form\">\n        <FormControl className=\"app__formControl\">\n          <Input className=\"app__input\" placeholder=\"Enter a message..\" value={input} onChange={event => setInput(event.target.value)} />\n          <IconButton className=\"app__iconButton\" disabled={!input} variant=\"contained\" color=\"primary\" type=\"submit\" onClick={sendMessage}>\n            <SendIcon/>\n          </IconButton>\n        </FormControl>\n      </form>\n      \n\n      <FlipMove>\n        {\n          messages.map(({id, message}) => (\n            <Message key={id} username={username} message={message}/>\n          ))\n        }\n      </FlipMove>\n\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}